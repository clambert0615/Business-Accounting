@using AccountingProgram.Models;

@model AccPayInvExp

<h1 style="text-align:center">Accounts Payable List</h1>
<br />
<label for="apInput">Further filter your search: </label>
<input type="text" id="apInput" onkeyup="myFunction()" placeholder="Filter search" title="Type in a keyword">

<table style="width:100%" id="apTable" class="table">

    <tr class="header">
        <th onclick="sortTable(0)" style="cursor:pointer">Payable ID</th>
        <th onclick="sortTable(1)" style="cursor:pointer">Vendor Name</th>
        <th onclick="sortTable(2)" style="cursor:pointer">Total Amount Due</th>
        <th onclick="sortTable(3)" style="cursor:pointer">Payment Due Date</th>
        <th onclick="sortTable(4)" style="cursor:pointer">Balance</th>
    </tr>


    @{
        foreach (var pay in Model.PayableList)
        {
            <tr>
                <td class="td1"><a name="@pay.PayableId" href="/AccountsPayable/IndividualPayable?id=@pay.PayableId">@pay.PayableId</a> </td>
                <td class="td1">@pay.VendorName</td>
                <td class="td1">@pay.AmountDue</td>
                <td class="td1">@pay.DueDate.ToString("yyyy-MM-dd")</td>
                <td class="td1">@pay.Balance </td>

            </tr>
        }
    }

</table>
<button onclick="location.href='/AccountsPayable/AddPayable'">Add New Purchase Order</button>

<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("apTable");
        switching = true;
        dir = "asc";
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                let xData = x.innerText;
                let yData = y.innerText;
                const isNumeric = !isNaN(parseFloat(xData)) && !isNaN(parseFloat(yData));
                if (dir == "asc") {
                    if ((isNumeric && parseFloat(xData) > parseFloat(yData)) ||
                        (!isNumeric && xData.toLowerCase() > yData.toLowerCase())) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if ((isNumeric && parseFloat(xData) < parseFloat(yData)) ||
                        (!isNumeric && xData.toLowerCase() < yData.toLowerCase())) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

    function myFunction() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("apInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("apTable");
        tr = table.getElementsByTagName("tr");
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            td2 = tr[i].getElementsByTagName("td")[1];
            td3 = tr[i].getElementsByTagName("td")[2];
            td4 = tr[i].getElementsByTagName("td")[3];
            td5 = tr[i].getElementsByTagName("td")[4];

            if (td || td2 || td3 || td4 || td5) {
                txtValue = td.textContent || td.innerText;
                txtValue2 = td2.textContent || td2.innerText;
                txtValue3 = td3.textContent || td3.innerText;
                txtValue4 = td4.textContent || td4.innerText;
                txtValue5 = td5.textContent || td5.innerText;

                if (txtValue.toUpperCase().indexOf(filter) > -1 || txtValue2.toUpperCase().indexOf(filter) > -1 || txtValue3.toUpperCase().indexOf(filter) > -1
                    || txtValue4.toUpperCase().indexOf(filter) > -1 || txtValue5.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>
